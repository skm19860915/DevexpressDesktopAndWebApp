// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.DataServices;

namespace WebApp.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20211113011424_AddTaggedObjs3")]
    partial class AddTaggedObjs3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlitzerCore.Models.AIDefaultFilter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AirFlightFilter")
                        .HasColumnType("int");

                    b.Property<int>("AirPortID")
                        .HasColumnType("int");

                    b.Property<int?>("InBoundFlightFilter")
                        .HasColumnType("int");

                    b.Property<int?>("OutBoundFlightFilter")
                        .HasColumnType("int");

                    b.Property<int?>("ResortFilter")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AgentId");

                    b.HasIndex("AirPortID");

                    b.ToTable("AIDefaultFilters");
                });

            modelBuilder.Entity("BlitzerCore.Models.AIFilter", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("AIFilterID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AIFilters");
                });

            modelBuilder.Entity("BlitzerCore.Models.AIFilterMAP", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AIFilterID")
                        .HasColumnType("int");

                    b.Property<int?>("FilterID")
                        .HasColumnType("int");

                    b.Property<int?>("FilterID1")
                        .HasColumnType("int");

                    b.Property<int?>("FilterID2")
                        .HasColumnType("int");

                    b.Property<int>("MapType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AIFilterID");

                    b.HasIndex("FilterID");

                    b.HasIndex("FilterID1");

                    b.HasIndex("FilterID2");

                    b.ToTable("AIFilterMaps");
                });

            modelBuilder.Entity("BlitzerCore.Models.AccountStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID");

                    b.ToTable("GetAccountStatuses");
                });

            modelBuilder.Entity("BlitzerCore.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExcursionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighLights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Itinerary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SightSeeing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("BlitzerCore.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.Ad", b =>
                {
                    b.Property<int>("AdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdID1")
                        .HasColumnType("int");

                    b.Property<int>("AdType")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdID");

                    b.HasIndex("AdID1");

                    b.HasIndex("MerchantId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("BlitzerCore.Models.AgentAirPortPreference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccommodationFilterMapID")
                        .HasColumnType("int");

                    b.Property<bool>("AdultOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("AdultsOnlySection")
                        .HasColumnType("bit");

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AirFilterMapID")
                        .HasColumnType("int");

                    b.Property<int>("AirportID")
                        .HasColumnType("int");

                    b.Property<bool>("AllInclusive")
                        .HasColumnType("bit");

                    b.Property<int?>("FilteredAccommodationId")
                        .HasColumnType("int");

                    b.Property<int?>("InboundAirFilterMapID")
                        .HasColumnType("int");

                    b.Property<int?>("OutboundAirFilterMapID")
                        .HasColumnType("int");

                    b.Property<double>("PerPersonBudget")
                        .HasColumnType("float");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<bool>("Stops_Equals_0")
                        .HasColumnType("bit");

                    b.Property<bool>("Stops_Equals_1")
                        .HasColumnType("bit");

                    b.Property<double>("TripBudget")
                        .HasColumnType("float");

                    b.Property<double>("TripMinBudget")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("AgentId");

                    b.HasIndex("AirportID");

                    b.ToTable("AgentAirPortPreferences");
                });

            modelBuilder.Entity("BlitzerCore.Models.AgentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DefaultAirPortId")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyFixedCost")
                        .HasColumnType("float");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("TimeZoneDiff")
                        .HasColumnType("int");

                    b.Property<int>("ViewMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("DefaultAirPortId");

                    b.ToTable("AgentProfiles");
                });

            modelBuilder.Entity("BlitzerCore.Models.AirPort", b =>
                {
                    b.Property<int>("AirPortID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirPortID");

                    b.HasIndex("CountryId");

                    b.ToTable("AirPort");
                });

            modelBuilder.Entity("BlitzerCore.Models.Amenity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("BlitzerCore.Models.AmenityMap", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccommodationID")
                        .HasColumnType("int");

                    b.Property<int>("AmenityID")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseLineId")
                        .HasColumnType("int");

                    b.Property<int?>("StagingHotelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccommodationID");

                    b.HasIndex("AmenityID");

                    b.HasIndex("CruiseLineId");

                    b.HasIndex("StagingHotelID");

                    b.ToTable("AmenityMaps");
                });

            modelBuilder.Entity("BlitzerCore.Models.BlitzSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Operational")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("OwnerID");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("BlitzerCore.Models.Blob", b =>
                {
                    b.Property<int>("BlobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlobID");

                    b.HasIndex("AdID");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("BlitzerCore.Models.BlockToPageMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("PageId");

                    b.ToTable("BlockToPageMap");
                });

            modelBuilder.Entity("BlitzerCore.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CruiseLineId")
                        .HasColumnType("int");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DepositDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepositDueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinalPayment")
                        .HasColumnType("datetime2");

                    b.Property<double>("GrossCommission")
                        .HasColumnType("float");

                    b.Property<double>("HQCommission")
                        .HasColumnType("float");

                    b.Property<double>("HostAgencyCommission")
                        .HasColumnType("float");

                    b.Property<double>("ICCommission")
                        .HasColumnType("float");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMemo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Received")
                        .HasColumnType("float");

                    b.Property<int>("SettlementAge")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TargetPayment")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TourOperatorID")
                        .HasColumnType("int");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CruiseLineId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TourOperatorID");

                    b.HasIndex("TripID");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BlitzerCore.Models.BusinessType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Commissionable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusinessTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BlitzerCore.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BlitzerCore.Models.ClientView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cookie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuoteGroupId");

                    b.ToTable("ClientViews");
                });

            modelBuilder.Entity("BlitzerCore.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessTypeID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HyperLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Promo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SettlementTerms")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbNail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Visiblity")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTypeID");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Companies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Company");
                });

            modelBuilder.Entity("BlitzerCore.Models.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("AAA_Member")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Anniversary")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GlobalEntryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HouseHoldId")
                        .HasColumnType("int");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int>("MealRequest")
                        .HasColumnType("int");

                    b.Property<string>("Middle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Middle_IsBlank")
                        .HasColumnType("bit");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PassportCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportIssueAgency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PassportIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatPreferences")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TSANumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tier")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewMode")
                        .HasColumnType("int");

                    b.Property<int>("Visiblity")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactSubTypeId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployerId");

                    b.HasIndex("HouseHoldId");

                    b.HasIndex("OwnedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Contact");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contact");
                });

            modelBuilder.Entity("BlitzerCore.Models.ContactSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("ContactSubTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.ContactTrip", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipID")
                        .HasColumnType("int");

                    b.HasKey("ContactId", "TripID");

                    b.HasIndex("RelationshipID");

                    b.HasIndex("TripID");

                    b.ToTable("ContactTrip");
                });

            modelBuilder.Entity("BlitzerCore.Models.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique()
                        .HasFilter("[PageId] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BlitzerCore.Models.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalBookingId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("OriginalBookingId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("BlitzerCore.Models.DBVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DBVersions");
                });

            modelBuilder.Entity("BlitzerCore.Models.DataMap", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TourOperatorID")
                        .HasColumnType("int");

                    b.Property<string>("input")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("output")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TourOperatorID");

                    b.ToTable("DataMaps");
                });

            modelBuilder.Entity("BlitzerCore.Models.Email", b =>
                {
                    b.Property<int>("EmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("EmailTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmailID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmailTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("BlitzerCore.Models.EmailType", b =>
                {
                    b.Property<int>("EmailTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTypeID");

                    b.ToTable("EmailTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.ErrorMsg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ErrorMsgs");
                });

            modelBuilder.Entity("BlitzerCore.Models.FOP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddressSameAsResidence")
                        .HasColumnType("bit");

                    b.Property<string>("CVN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Expiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOnCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerID");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("BlitzerCore.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Operational")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SystemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("OwnerID");

                    b.HasIndex("SystemId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("BlitzerCore.Models.File", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FileDirectoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("URI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContactId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("TaskId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("BlitzerCore.Models.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.Filter", b =>
                {
                    b.Property<int>("FilterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdultOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("AdultsOnlySection")
                        .HasColumnType("bit");

                    b.Property<bool>("AllInclusive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PerPersonBudget")
                        .HasColumnType("float");

                    b.Property<int>("QuoteGroupID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<string>("SelectedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<bool>("Stops_Equals_0")
                        .HasColumnType("bit");

                    b.Property<bool>("Stops_Equals_1")
                        .HasColumnType("bit");

                    b.Property<double>("TripBudget")
                        .HasColumnType("float");

                    b.Property<double>("TripMinBudget")
                        .HasColumnType("float");

                    b.Property<bool>("isDefault")
                        .HasColumnType("bit");

                    b.HasKey("FilterID");

                    b.HasIndex("QuoteGroupID");

                    b.HasIndex("QuoteRequestID");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("BlitzerCore.Models.FilteredAccommodation", b =>
                {
                    b.Property<int>("FilterAcommodationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccommodationID")
                        .HasColumnType("int");

                    b.Property<int?>("FilterID")
                        .HasColumnType("int");

                    b.Property<int?>("FilteredAccommodationId")
                        .HasColumnType("int");

                    b.Property<int?>("PreferenceId")
                        .HasColumnType("int");

                    b.HasKey("FilterAcommodationID");

                    b.HasIndex("AccommodationID");

                    b.HasIndex("FilterID");

                    b.HasIndex("PreferenceId");

                    b.ToTable("FilteredAccommodations");
                });

            modelBuilder.Entity("BlitzerCore.Models.FlightItinerary", b =>
                {
                    b.Property<int>("FlightItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ExtraCost")
                        .HasColumnType("float");

                    b.Property<int?>("InBoundLegID")
                        .HasColumnType("int");

                    b.Property<int?>("OutBoundLegID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.HasKey("FlightItineraryId");

                    b.HasIndex("InBoundLegID");

                    b.HasIndex("OutBoundLegID");

                    b.HasIndex("QuoteGroupId");

                    b.HasIndex("QuoteID");

                    b.HasIndex("QuoteRequestID");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("FlightItineraries");
                });

            modelBuilder.Entity("BlitzerCore.Models.HouseHold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HouseHolds");
                });

            modelBuilder.Entity("BlitzerCore.Models.IncludedSKUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilteredAccommodationId")
                        .HasColumnType("int");

                    b.Property<int>("SKUId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilteredAccommodationId");

                    b.HasIndex("SKUId");

                    b.ToTable("IncludedSKUs");
                });

            modelBuilder.Entity("BlitzerCore.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TripID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("BlitzerCore.Models.Leg", b =>
                {
                    b.Property<int>("LegID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stops")
                        .HasColumnType("int");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.Property<int>("TripTicketId")
                        .HasColumnType("int");

                    b.HasKey("LegID");

                    b.HasIndex("QuoteGroupId");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("Leg");
                });

            modelBuilder.Entity("BlitzerCore.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("PictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BlitzerCore.Models.LogMsg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MsgType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LogMsgs");
                });

            modelBuilder.Entity("BlitzerCore.Models.MarketingAd", b =>
                {
                    b.Property<int>("AdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainVideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdID");

                    b.ToTable("MarketingAd");
                });

            modelBuilder.Entity("BlitzerCore.Models.MemberShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfMemberShip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("MemberShips");
                });

            modelBuilder.Entity("BlitzerCore.Models.MerchantServices", b =>
                {
                    b.Property<int>("MerchantID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int?>("AccommodationID")
                        .HasColumnType("int");

                    b.Property<int?>("TransportationID")
                        .HasColumnType("int");

                    b.HasKey("MerchantID", "ServiceID");

                    b.HasIndex("AccommodationID");

                    b.HasIndex("TransportationID");

                    b.ToTable("MerchantServices");
                });

            modelBuilder.Entity("BlitzerCore.Models.NameReplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Original")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReplaceType")
                        .HasColumnType("int");

                    b.Property<int?>("SKUId")
                        .HasColumnType("int");

                    b.Property<int?>("TourOperatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("SKUId");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("NameReplacements");
                });

            modelBuilder.Entity("BlitzerCore.Models.NewsFeed", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("News")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewsTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OpportunityID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int?>("TaskID")
                        .HasColumnType("int");

                    b.Property<string>("TimeAgo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserStoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ContactId");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("ParentID");

                    b.HasIndex("TaskID");

                    b.HasIndex("UserStoryID");

                    b.ToTable("NewsFeeds");
                });

            modelBuilder.Entity("BlitzerCore.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Where")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Who")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("WriterId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("BlitzerCore.Models.Opportunity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InboundAirPortID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OppClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OutboundAirPortID")
                        .HasColumnType("int");

                    b.Property<int?>("ReferralId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InboundAirPortID");

                    b.HasIndex("OutboundAirPortID");

                    b.HasIndex("ReferralId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Opportunities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Opportunity");
                });

            modelBuilder.Entity("BlitzerCore.Models.PageToBlockMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("PageId");

                    b.ToTable("PageToBlockMap");
                });

            modelBuilder.Entity("BlitzerCore.Models.Paragraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("HotelId");

                    b.ToTable("Paragraph");
                });

            modelBuilder.Entity("BlitzerCore.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("Confirmation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FOPId")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FOPId");

                    b.HasIndex("PayeeID");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BlitzerCore.Models.Phone", b =>
                {
                    b.Property<int>("PhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Defaut")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhoneTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("BlitzerCore.Models.PhoneType", b =>
                {
                    b.Property<int>("PhoneTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneTypeID");

                    b.ToTable("PhoneType");
                });

            modelBuilder.Entity("BlitzerCore.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ApproverID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HotelID")
                        .HasColumnType("int");

                    b.Property<int?>("PToMMapID")
                        .HasColumnType("int");

                    b.Property<int>("ParentPostID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("HotelID");

                    b.HasIndex("PToMMapID");

                    b.HasIndex("ParentPostID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BlitzerCore.Models.PostToMediaMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaID")
                        .HasColumnType("int");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PostToMediaMapper");
                });

            modelBuilder.Entity("BlitzerCore.Models.PreferredAirPort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AirPortID")
                        .HasColumnType("int");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AirPortID");

                    b.HasIndex("ContactId");

                    b.ToTable("PreferredAirPort");
                });

            modelBuilder.Entity("BlitzerCore.Models.Presentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cookie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentWebPageId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWebPageId");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("BlitzerCore.Models.PresentationQueueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("PresentationId")
                        .HasColumnType("int");

                    b.Property<int>("WebPageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PresentationId");

                    b.HasIndex("WebPageId");

                    b.ToTable("PresentationQueueItems");
                });

            modelBuilder.Entity("BlitzerCore.Models.Quote", b =>
                {
                    b.Property<int>("QuoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccommodationRoomTypeID")
                        .HasColumnType("int");

                    b.Property<double>("Adjustment")
                        .HasColumnType("float");

                    b.Property<bool>("Booked")
                        .HasColumnType("bit");

                    b.Property<string>("BookedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BookedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("FlightPrice")
                        .HasColumnType("float");

                    b.Property<int?>("Insurance")
                        .HasColumnType("int");

                    b.Property<double>("PackagePrice")
                        .HasColumnType("float");

                    b.Property<int>("QuoteGroupID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<double>("ResortPrice")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int?>("TourOperatorID")
                        .HasColumnType("int");

                    b.Property<int?>("Transfer")
                        .HasColumnType("int");

                    b.HasKey("QuoteID");

                    b.HasIndex("AccommodationRoomTypeID");

                    b.HasIndex("BookedById");

                    b.HasIndex("QuoteGroupID");

                    b.HasIndex("QuoteRequestID");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TourOperatorID");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteRequestTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedQuoteRequestTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Viewed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuoteRequestID");

                    b.HasIndex("QuoteRequestTicketId");

                    b.ToTable("QuoteGroups");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequest", b =>
                {
                    b.Property<int>("QuoteRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Child1Age")
                        .HasColumnType("int");

                    b.Property<int?>("Child2Age")
                        .HasColumnType("int");

                    b.Property<int?>("Child3Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartureAirPortID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartureAirPortID2")
                        .HasColumnType("int");

                    b.Property<int?>("DepartureAirPortID3")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAirPortID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("OpportunityID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteType")
                        .HasColumnType("int");

                    b.Property<int?>("RefferalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentQuote")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("QuoteRequestID");

                    b.HasIndex("AgentId");

                    b.HasIndex("DepartureAirPortID");

                    b.HasIndex("DepartureAirPortID2");

                    b.HasIndex("DepartureAirPortID3");

                    b.HasIndex("DestinationAirPortID");

                    b.HasIndex("OpportunityID");

                    b.ToTable("QuoteRequests");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequestResort", b =>
                {
                    b.Property<int>("QuoteRequestResortID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<bool>("LandOnly")
                        .HasColumnType("bit");

                    b.Property<string>("MealPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ResortId")
                        .HasColumnType("int");

                    b.Property<int>("ResortRoomTypeID")
                        .HasColumnType("int");

                    b.Property<string>("RoomURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourOperatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("QuoteRequestResortID");

                    b.HasIndex("QuoteGroupId");

                    b.HasIndex("ResortId");

                    b.HasIndex("ResortRoomTypeID");

                    b.HasIndex("TourOperatorID");

                    b.ToTable("QuoteRequestResorts");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequestResortFilter", b =>
                {
                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<int>("AccommodationID")
                        .HasColumnType("int");

                    b.HasKey("QuoteRequestID", "AccommodationID");

                    b.HasIndex("AccommodationID");

                    b.ToTable("QuoteRequestResortFilter");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequestTourOperatorFilter", b =>
                {
                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<int>("TourOperatorID")
                        .HasColumnType("int");

                    b.HasKey("QuoteRequestID", "TourOperatorID");

                    b.HasIndex("TourOperatorID");

                    b.ToTable("QuoteRequestTourOperatorFilter");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteSKUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuoteID")
                        .HasColumnType("int");

                    b.Property<int>("SKUID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuoteID");

                    b.HasIndex("SKUID");

                    b.ToTable("QuoteSKUs");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteToResultsMapper", b =>
                {
                    b.Property<int>("QRToQMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Booked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BookedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<int?>("FlightItineraryId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteRequestResortID")
                        .HasColumnType("int");

                    b.HasKey("QRToQMapID");

                    b.HasIndex("FlightItineraryId");

                    b.HasIndex("QuoteGroupID");

                    b.HasIndex("QuoteRequestResortID");

                    b.ToTable("QuoteToResultsMappers");
                });

            modelBuilder.Entity("BlitzerCore.Models.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RankingPageId")
                        .HasColumnType("int");

                    b.Property<int>("ResortPageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RankingPageId");

                    b.HasIndex("ResortPageId");

                    b.ToTable("ResortRankings");
                });

            modelBuilder.Entity("BlitzerCore.Models.ReferralSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("BlitzerCore.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("BlitzerCore.Models.RegisterBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Directions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("RegisterBookings");
                });

            modelBuilder.Entity("BlitzerCore.Models.Relationship", b =>
                {
                    b.Property<int>("RelationshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RelationshipID");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("BlitzerCore.Models.RelationshipMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrimaryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<string>("TargetId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("TargetId");

                    b.ToTable("RelationshipMaps");
                });

            modelBuilder.Entity("BlitzerCore.Models.SKU", b =>
                {
                    b.Property<int>("SKUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SKUID");

                    b.HasIndex("ProviderID");

                    b.ToTable("SKUs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SKU");
                });

            modelBuilder.Entity("BlitzerCore.Models.SavedAd", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AdID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "AdID");

                    b.ToTable("SavedAds");
                });

            modelBuilder.Entity("BlitzerCore.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ServiceID");

                    b.HasIndex("ParentID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BlitzerCore.Models.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerID");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("BlitzerCore.Models.Stage", b =>
                {
                    b.Property<int>("StageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+Flight", b =>
                {
                    b.Property<int>("FlightStagingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aircraft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrivalDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrivalLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrivalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItineraryGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LegGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumberOfStop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int>("TourOperatorID")
                        .HasColumnType("int");

                    b.HasKey("FlightStagingID");

                    b.HasIndex("QuoteGroupId");

                    b.HasIndex("TourOperatorID");

                    b.ToTable("Staging_Flights");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+Hotel", b =>
                {
                    b.Property<int>("HotelStagingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AAPreferred")
                        .HasColumnType("bit");

                    b.Property<string>("ChildPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("Stars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourOperatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("HotelStagingID");

                    b.HasIndex("QuoteGroupId");

                    b.ToTable("Staging_Hotels");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+HotelRate", b =>
                {
                    b.Property<int>("HotelRateStagingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChildPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelStagingID")
                        .HasColumnType("int");

                    b.Property<bool>("LandOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelRateStagingID");

                    b.HasIndex("HotelStagingID");

                    b.ToTable("Staging_HotelRates");
                });

            modelBuilder.Entity("BlitzerCore.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BlitzerCore.Models.TagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagCategories");
                });

            modelBuilder.Entity("BlitzerCore.Models.TagCategoryMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagCategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("TagCategoryMap");
                });

            modelBuilder.Entity("BlitzerCore.Models.TaggedObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("TagId");

                    b.ToTable("TaggedObjects");
                });

            modelBuilder.Entity("BlitzerCore.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActiveBaseLineDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientOrgID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CompletedNotificationSent")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DatesCalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("DayLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FixedField")
                        .HasColumnType("int");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HoldUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpportunityID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PercentComplete")
                        .HasColumnType("float");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("PriorityType")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<int?>("SprintId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("Sunday")
                        .HasColumnType("bit");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<int?>("TargetCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("TargetContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TaskType")
                        .HasColumnType("int");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserStoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.Property<bool>("isReoccuring")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IssuerID");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("SprintId");

                    b.HasIndex("TargetCompanyId");

                    b.HasIndex("TargetContactId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserStoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("BlitzerCore.Models.TaskTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("FromEndDate")
                        .HasColumnType("int");

                    b.Property<int?>("FromStartDate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Opportunity")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("TaskTemplate");
                });

            modelBuilder.Entity("BlitzerCore.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BlitzerCore.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("BlitzerCore.Models.Transportation", b =>
                {
                    b.Property<int>("TransportationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArrivalAirPortID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Arrive")
                        .HasColumnType("datetime2");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Confirmation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Depart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartAirPortID")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteID")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransportationID");

                    b.HasIndex("ArrivalAirPortID");

                    b.HasIndex("DepartAirPortID");

                    b.HasIndex("QuoteGroupId");

                    b.HasIndex("QuoteID");

                    b.HasIndex("QuoteRequestID");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("Transportations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transportation");
                });

            modelBuilder.Entity("BlitzerCore.Models.TripComponent", b =>
                {
                    b.Property<int>("TransportationID")
                        .HasColumnType("int");

                    b.Property<int>("AccommodationID")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("TripID")
                        .HasColumnType("int");

                    b.HasKey("TransportationID", "AccommodationID");

                    b.HasIndex("AccommodationID");

                    b.HasIndex("TripID");

                    b.ToTable("TripComponents");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlockToPageMapID")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HTML")
                        .HasColumnType("bit");

                    b.Property<string>("ListTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MediaID")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlockToPageMapID");

                    b.HasIndex("MediaID");

                    b.ToTable("Block");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Block");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoID")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VideoID")
                        .HasColumnType("int");

                    b.Property<string>("p1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("p2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("p3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("p4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoID");

                    b.HasIndex("VideoID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Graphic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int>("MediaFormat")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Graphics");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Graphic");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForGallery")
                        .HasColumnType("bit");

                    b.Property<int?>("MPegID")
                        .HasColumnType("int");

                    b.Property<int?>("PageID")
                        .HasColumnType("int");

                    b.Property<int?>("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("Size1024x640ID")
                        .HasColumnType("int");

                    b.Property<int?>("Size1600x1200ID")
                        .HasColumnType("int");

                    b.Property<int?>("Size1920x1080ID")
                        .HasColumnType("int");

                    b.Property<int?>("Size560x460ID")
                        .HasColumnType("int");

                    b.Property<int?>("ThumbNailID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CountryID");

                    b.HasIndex("MPegID");

                    b.HasIndex("PageID");

                    b.HasIndex("PostID");

                    b.HasIndex("Size1024x640ID");

                    b.HasIndex("Size1600x1200ID");

                    b.HasIndex("Size1920x1080ID");

                    b.HasIndex("Size560x460ID");

                    b.HasIndex("ThumbNailID");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContentID")
                        .HasColumnType("int");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeaderImageID")
                        .HasColumnType("int");

                    b.Property<int?>("MainImageID")
                        .HasColumnType("int");

                    b.Property<string>("OverRideUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageCaption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("ContentID");

                    b.HasIndex("HeaderImageID");

                    b.HasIndex("MainImageID");

                    b.HasIndex("PageTypeId");

                    b.ToTable("Pages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Page");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.PageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PageTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Panel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Panel");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserLocation", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("LocationID");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserLocationPreference", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserPreference")
                        .HasColumnType("int");

                    b.HasKey("UserID", "UserPreference");

                    b.ToTable("UserLocationPreferences");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserMap", b =>
                {
                    b.Property<int>("UserMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OpportunityID")
                        .HasColumnType("int");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserMapID");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("UserID");

                    b.ToTable("UserMaps");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcceptanceCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("IssuerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LOE")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Operational")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PercentComplete")
                        .HasColumnType("float");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<int?>("SprintID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FeatureId");

                    b.HasIndex("IssuerID");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("OwnerID");

                    b.HasIndex("SprintID");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserTrackings");
                });

            modelBuilder.Entity("BlitzerCore.Models.WebPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebPages");
                });

            modelBuilder.Entity("BlitzerCore.Models.WebSrvLogin", b =>
                {
                    b.Property<int>("WebSrvLoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourOperatorID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WebSrvLoginID");

                    b.HasIndex("AgentId");

                    b.HasIndex("TourOperatorID");

                    b.ToTable("WebSrvLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApp.DataServices.BlitzerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LoginEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BlitzerCore.Models.Franchise", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Company");

                    b.Property<double>("CommissionRate")
                        .HasColumnType("float");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("FranchiseOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("FranchiseOwnerId");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("Franchise");
                });

            modelBuilder.Entity("BlitzerCore.Models.Hotel", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Company");

                    b.Property<bool>("AAPreferredProvider")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AirPortID")
                        .HasColumnType("int");

                    b.Property<double>("AirportDistance")
                        .HasColumnType("float");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bedding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FoodRating")
                        .HasColumnType("float");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inclusions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<double?>("RoomRating")
                        .HasColumnType("float");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AirPortID");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QuoteRequestID");

                    b.HasDiscriminator().HasValue("Hotel");
                });

            modelBuilder.Entity("BlitzerCore.Models.Merchant", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Company");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StatusID");

                    b.HasDiscriminator().HasValue("Merchant");
                });

            modelBuilder.Entity("BlitzerCore.Models.TourOperator", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Company");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.Agent", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Contact");

                    b.Property<int?>("AgentProfileId")
                        .HasColumnType("int");

                    b.Property<double>("CommissionRate")
                        .HasColumnType("float");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int?>("PrimaryTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasIndex("AgentProfileId");

                    b.HasIndex("PrimaryTeamId");

                    b.HasDiscriminator().HasValue("Agent");
                });

            modelBuilder.Entity("BlitzerCore.Models.Client", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Contact");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PendingMerchantApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<int?>("RelationshipID")
                        .HasColumnType("int");

                    b.Property<bool>("isMerchant")
                        .HasColumnType("bit");

                    b.HasIndex("RelationshipID");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("BlitzerCore.Models.Trip", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Opportunity");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("DaysToStart")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DocumentsPrintedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripStage")
                        .HasColumnType("int");

                    b.Property<int>("TripStatus")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Trip");
                });

            modelBuilder.Entity("BlitzerCore.Models.Cruise", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.SKU");

                    b.HasDiscriminator().HasValue("Cruise");
                });

            modelBuilder.Entity("BlitzerCore.Models.RoomType", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.SKU");

                    b.Property<bool>("KingOr2Queens")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("RoomType");
                });

            modelBuilder.Entity("BlitzerCore.Models.Tour", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.SKU");

                    b.HasDiscriminator().HasValue("Tour");
                });

            modelBuilder.Entity("BlitzerCore.Models.Flight", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Transportation");

                    b.Property<int?>("FlightItinId")
                        .HasColumnType("int");

                    b.Property<Guid>("LegGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Quoted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.HasIndex("FlightItinId");

                    b.HasIndex("LegId");

                    b.HasDiscriminator().HasValue("Flight");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Comparable", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Block");

                    b.Property<int>("BaseResortID")
                        .HasColumnType("int");

                    b.Property<int>("CompID")
                        .HasColumnType("int");

                    b.Property<int?>("PanelId")
                        .HasColumnType("int");

                    b.Property<int?>("ResortID")
                        .HasColumnType("int");

                    b.HasIndex("PanelId");

                    b.HasIndex("ResortID");

                    b.HasDiscriminator().HasValue("Comparable");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Tile", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Block");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("PanelId")
                        .HasColumnType("int")
                        .HasColumnName("Tile_PanelId");

                    b.Property<int?>("ResortID")
                        .HasColumnType("int")
                        .HasColumnName("Tile_ResortID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PanelId");

                    b.HasIndex("ResortID");

                    b.HasDiscriminator().HasValue("Tile");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Photo", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Graphic");

                    b.HasDiscriminator().HasValue("Photo");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Video", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Graphic");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Gallary", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Page");

                    b.HasIndex("CountryId");

                    b.HasDiscriminator().HasValue("Gallary");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.SubPage", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Page");

                    b.HasIndex("CountryId");

                    b.HasDiscriminator().HasValue("SubPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UICountry", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Page");

                    b.HasIndex("CountryId");

                    b.HasDiscriminator().HasValue("UICountry");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UIRanking", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Page");

                    b.HasIndex("CountryId");

                    b.HasDiscriminator().HasValue("UIRanking");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UIResortPage", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.UI.Page");

                    b.Property<int?>("LeftPanelID")
                        .HasColumnType("int");

                    b.Property<int?>("RightPanelID")
                        .HasColumnType("int");

                    b.Property<int?>("UICountryId")
                        .HasColumnType("int");

                    b.HasIndex("CountryId");

                    b.HasIndex("LeftPanelID");

                    b.HasIndex("RightPanelID");

                    b.HasIndex("UICountryId");

                    b.HasDiscriminator().HasValue("UIResortPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.Resort", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.Hotel");

                    b.Property<double?>("BeachRating")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("Resort");
                });

            modelBuilder.Entity("BlitzerCore.Models.CruiseLine", b =>
                {
                    b.HasBaseType("BlitzerCore.Models.TourOperator");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CruiseLine");
                });

            modelBuilder.Entity("BlitzerCore.Models.AIDefaultFilter", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("BlitzerCore.Models.AirPort", "AirPort")
                        .WithMany()
                        .HasForeignKey("AirPortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("AirPort");
                });

            modelBuilder.Entity("BlitzerCore.Models.AIFilterMAP", b =>
                {
                    b.HasOne("BlitzerCore.Models.AIFilter", "AIFilter")
                        .WithMany()
                        .HasForeignKey("AIFilterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Filter", null)
                        .WithMany("AirFilters")
                        .HasForeignKey("FilterID");

                    b.HasOne("BlitzerCore.Models.Filter", null)
                        .WithMany("InboundFilters")
                        .HasForeignKey("FilterID1");

                    b.HasOne("BlitzerCore.Models.Filter", null)
                        .WithMany("OutboundFilters")
                        .HasForeignKey("FilterID2");

                    b.Navigation("AIFilter");
                });

            modelBuilder.Entity("BlitzerCore.Models.Activity", b =>
                {
                    b.HasOne("BlitzerCore.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BlitzerCore.Models.Ad", b =>
                {
                    b.HasOne("BlitzerCore.Models.Ad", null)
                        .WithMany("SupplementalMaterial")
                        .HasForeignKey("AdID1");

                    b.HasOne("BlitzerCore.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("BlitzerCore.Models.AgentAirPortPreference", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("BlitzerCore.Models.AirPort", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("BlitzerCore.Models.AgentProfile", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("BlitzerCore.Models.AirPort", "DefaultAirPort")
                        .WithMany()
                        .HasForeignKey("DefaultAirPortId");

                    b.Navigation("Agent");

                    b.Navigation("DefaultAirPort");
                });

            modelBuilder.Entity("BlitzerCore.Models.AirPort", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BlitzerCore.Models.AmenityMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.Hotel", "Accommodation")
                        .WithMany("Amenities")
                        .HasForeignKey("AccommodationID");

                    b.HasOne("BlitzerCore.Models.Amenity", "Amenity")
                        .WithMany()
                        .HasForeignKey("AmenityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.CruiseLine", null)
                        .WithMany("Amenities")
                        .HasForeignKey("CruiseLineId");

                    b.HasOne("BlitzerCore.Models.Staging+Hotel", "StagingHotel")
                        .WithMany("Amenities")
                        .HasForeignKey("StagingHotelID");

                    b.Navigation("Accommodation");

                    b.Navigation("Amenity");

                    b.Navigation("StagingHotel");
                });

            modelBuilder.Entity("BlitzerCore.Models.BlitzSystem", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.Agent", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("BlitzerCore.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BlitzerCore.Models.Blob", b =>
                {
                    b.HasOne("BlitzerCore.Models.Ad", "Ad")
                        .WithMany("Blobs")
                        .HasForeignKey("AdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("BlitzerCore.Models.BlockToPageMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.UI.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("BlitzerCore.Models.Booking", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.CruiseLine", "Cruise")
                        .WithMany()
                        .HasForeignKey("CruiseLineId");

                    b.HasOne("BlitzerCore.Models.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany("Bookings")
                        .HasForeignKey("TourOperatorID");

                    b.HasOne("BlitzerCore.Models.Trip", "Trip")
                        .WithMany("Bookings")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Cruise");

                    b.Navigation("Supplier");

                    b.Navigation("TourOperator");

                    b.Navigation("Trip");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BlitzerCore.Models.City", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BlitzerCore.Models.ClientView", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany("ClientViews")
                        .HasForeignKey("QuoteGroupId");

                    b.Navigation("QuoteGroup");
                });

            modelBuilder.Entity("BlitzerCore.Models.Company", b =>
                {
                    b.HasOne("BlitzerCore.Models.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeID");

                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("BlitzerCore.Models.Contact", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.UI.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("BusinessType");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("Page");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BlitzerCore.Models.Contact", b =>
                {
                    b.HasOne("BlitzerCore.Models.ContactSubType", "ContactSubType")
                        .WithMany()
                        .HasForeignKey("ContactSubTypeId");

                    b.HasOne("BlitzerCore.Models.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("BlitzerCore.Models.Contact", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.Company", "Employer")
                        .WithMany("Contacts")
                        .HasForeignKey("EmployerId");

                    b.HasOne("BlitzerCore.Models.HouseHold", "HouseHold")
                        .WithMany("Members")
                        .HasForeignKey("HouseHoldId");

                    b.HasOne("BlitzerCore.Models.Agent", "OwnedBy")
                        .WithMany("Clients")
                        .HasForeignKey("OwnedById");

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("ContactSubType");

                    b.Navigation("ContactType");

                    b.Navigation("CreatedBy");

                    b.Navigation("Employer");

                    b.Navigation("HouseHold");

                    b.Navigation("OwnedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BlitzerCore.Models.ContactSubType", b =>
                {
                    b.HasOne("BlitzerCore.Models.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("BlitzerCore.Models.ContactTrip", b =>
                {
                    b.HasOne("BlitzerCore.Models.Client", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Relationship");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BlitzerCore.Models.Country", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.UICountry", "CountryPage")
                        .WithOne()
                        .HasForeignKey("BlitzerCore.Models.Country", "PageId");

                    b.HasOne("BlitzerCore.Models.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryPage");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlitzerCore.Models.Credit", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Traveler")
                        .WithMany("Credits")
                        .HasForeignKey("ContactId");

                    b.HasOne("BlitzerCore.Models.Booking", "OriginalBooking")
                        .WithMany("Credits")
                        .HasForeignKey("OriginalBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalBooking");

                    b.Navigation("Traveler");
                });

            modelBuilder.Entity("BlitzerCore.Models.DataMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.Email", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Company")
                        .WithMany("Emails")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BlitzerCore.Models.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("EmailTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlitzerCore.Models.FOP", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.Contact", "Owner")
                        .WithMany("Cards")
                        .HasForeignKey("OwnerID");

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Owner");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BlitzerCore.Models.Feature", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.Agent", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("BlitzerCore.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("BlitzerCore.Models.BlitzSystem", "System")
                        .WithMany("Features")
                        .HasForeignKey("SystemId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Owner");

                    b.Navigation("System");
                });

            modelBuilder.Entity("BlitzerCore.Models.File", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("BlitzerCore.Models.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany("Files")
                        .HasForeignKey("OpportunityId");

                    b.HasOne("BlitzerCore.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("FileType");

                    b.Navigation("Opportunity");

                    b.Navigation("Owner");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BlitzerCore.Models.Filter", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany()
                        .HasForeignKey("QuoteGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany()
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteGroup");

                    b.Navigation("QuoteRequest");
                });

            modelBuilder.Entity("BlitzerCore.Models.FilteredAccommodation", b =>
                {
                    b.HasOne("BlitzerCore.Models.Hotel", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Filter", "Filter")
                        .WithMany("Accommodations")
                        .HasForeignKey("FilterID");

                    b.HasOne("BlitzerCore.Models.AgentAirPortPreference", "Preference")
                        .WithMany("PreferredHotels")
                        .HasForeignKey("PreferenceId");

                    b.Navigation("Accommodation");

                    b.Navigation("Filter");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("BlitzerCore.Models.FlightItinerary", b =>
                {
                    b.HasOne("BlitzerCore.Models.Leg", "InBound")
                        .WithMany()
                        .HasForeignKey("InBoundLegID");

                    b.HasOne("BlitzerCore.Models.Leg", "OutBound")
                        .WithMany()
                        .HasForeignKey("OutBoundLegID");

                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany("Flights")
                        .HasForeignKey("QuoteGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Quote", null)
                        .WithMany("Flights")
                        .HasForeignKey("QuoteID");

                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany("Tickets")
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InBound");

                    b.Navigation("OutBound");

                    b.Navigation("QuoteGroup");

                    b.Navigation("QuoteRequest");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.IncludedSKUs", b =>
                {
                    b.HasOne("BlitzerCore.Models.FilteredAccommodation", "FilteredAccommodation")
                        .WithMany("IncludedSKUs")
                        .HasForeignKey("FilteredAccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.SKU", "SKU")
                        .WithMany()
                        .HasForeignKey("SKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilteredAccommodation");

                    b.Navigation("SKU");
                });

            modelBuilder.Entity("BlitzerCore.Models.Invoice", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("BlitzerCore.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BlitzerCore.Models.Leg", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany()
                        .HasForeignKey("QuoteGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteGroup");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.MemberShip", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "Contact")
                        .WithMany("MemberShips")
                        .HasForeignKey("ContactId");

                    b.Navigation("Company");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("BlitzerCore.Models.MerchantServices", b =>
                {
                    b.HasOne("BlitzerCore.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("AccommodationID");

                    b.HasOne("BlitzerCore.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("TransportationID");

                    b.Navigation("Merchant");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BlitzerCore.Models.NameReplacement", b =>
                {
                    b.HasOne("BlitzerCore.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.SKU", "SKU")
                        .WithMany()
                        .HasForeignKey("SKUId");

                    b.HasOne("BlitzerCore.Models.TourOperator", "Trip")
                        .WithMany()
                        .HasForeignKey("TourOperatorId");

                    b.Navigation("Hotel");

                    b.Navigation("SKU");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BlitzerCore.Models.NewsFeed", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("BlitzerCore.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityID");

                    b.HasOne("BlitzerCore.Models.NewsFeed", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.HasOne("BlitzerCore.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID");

                    b.HasOne("BlitzerCore.Models.UserStory", "UserStory")
                        .WithMany()
                        .HasForeignKey("UserStoryID");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Opportunity");

                    b.Navigation("Parent");

                    b.Navigation("Task");

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("BlitzerCore.Models.Note", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Company")
                        .WithMany("NoteEntries")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BlitzerCore.Models.Contact", "Contact")
                        .WithMany("NoteEntries")
                        .HasForeignKey("ContactId");

                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany("NoteEntries")
                        .HasForeignKey("OpportunityId");

                    b.HasOne("BlitzerCore.Models.Contact", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Opportunity");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("BlitzerCore.Models.Opportunity", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("BlitzerCore.Models.Contact", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.AirPort", "InboundAirPort")
                        .WithMany()
                        .HasForeignKey("InboundAirPortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.AirPort", "OutboundAirPort")
                        .WithMany()
                        .HasForeignKey("OutboundAirPortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.ReferralSource", "Referral")
                        .WithMany()
                        .HasForeignKey("ReferralId");

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Agent");

                    b.Navigation("CreatedBy");

                    b.Navigation("InboundAirPort");

                    b.Navigation("OutboundAirPort");

                    b.Navigation("Referral");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BlitzerCore.Models.PageToBlockMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.UI.Page", null)
                        .WithMany("Blocks")
                        .HasForeignKey("PageId");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("BlitzerCore.Models.Paragraph", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.Content", null)
                        .WithMany("Paragraphs")
                        .HasForeignKey("ContentId");

                    b.HasOne("BlitzerCore.Models.Hotel", null)
                        .WithMany("Paragraphs")
                        .HasForeignKey("HotelId");
                });

            modelBuilder.Entity("BlitzerCore.Models.Payment", b =>
                {
                    b.HasOne("BlitzerCore.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.FOP", "Card")
                        .WithMany()
                        .HasForeignKey("FOPId");

                    b.HasOne("BlitzerCore.Models.Contact", "Payee")
                        .WithMany()
                        .HasForeignKey("PayeeID");

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Booking");

                    b.Navigation("Card");

                    b.Navigation("CreatedBy");

                    b.Navigation("Payee");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("BlitzerCore.Models.Phone", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Company")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BlitzerCore.Models.PhoneType", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("PhoneType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlitzerCore.Models.Post", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverID");

                    b.HasOne("BlitzerCore.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID");

                    b.HasOne("BlitzerCore.Models.PostToMediaMapper", "PToMMap")
                        .WithMany()
                        .HasForeignKey("PToMMapID");

                    b.HasOne("BlitzerCore.Models.Post", "ParentPost")
                        .WithMany()
                        .HasForeignKey("ParentPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Approver");

                    b.Navigation("Hotel");

                    b.Navigation("ParentPost");

                    b.Navigation("PToMMap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlitzerCore.Models.PreferredAirPort", b =>
                {
                    b.HasOne("BlitzerCore.Models.AirPort", "AirPort")
                        .WithMany()
                        .HasForeignKey("AirPortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "Contact")
                        .WithMany("PreferredAirPorts")
                        .HasForeignKey("ContactId");

                    b.Navigation("AirPort");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("BlitzerCore.Models.Presentation", b =>
                {
                    b.HasOne("BlitzerCore.Models.WebPage", "CurrentWebPage")
                        .WithMany()
                        .HasForeignKey("CurrentWebPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentWebPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.PresentationQueueItem", b =>
                {
                    b.HasOne("BlitzerCore.Models.Presentation", "Presentation")
                        .WithMany("Queue")
                        .HasForeignKey("PresentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.WebPage", "WebPage")
                        .WithMany()
                        .HasForeignKey("WebPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presentation");

                    b.Navigation("WebPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.Quote", b =>
                {
                    b.HasOne("BlitzerCore.Models.SKU", "AccommodationRoomType")
                        .WithMany()
                        .HasForeignKey("AccommodationRoomTypeID");

                    b.HasOne("BlitzerCore.Models.Contact", "BookedBy")
                        .WithMany()
                        .HasForeignKey("BookedById");

                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany("Quotes")
                        .HasForeignKey("QuoteGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany()
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Hotel", "Accommodation")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorID");

                    b.Navigation("Accommodation");

                    b.Navigation("AccommodationRoomType");

                    b.Navigation("BookedBy");

                    b.Navigation("QuoteGroup");

                    b.Navigation("QuoteRequest");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteGroup", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany("QuoteGroups")
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.FlightItinerary", "SelectedQuoteRequestTicket")
                        .WithMany()
                        .HasForeignKey("QuoteRequestTicketId");

                    b.Navigation("QuoteRequest");

                    b.Navigation("SelectedQuoteRequestTicket");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequest", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("BlitzerCore.Models.AirPort", "DepartureAirPort")
                        .WithMany()
                        .HasForeignKey("DepartureAirPortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.AirPort", "DepartureAirPort2")
                        .WithMany()
                        .HasForeignKey("DepartureAirPortID2");

                    b.HasOne("BlitzerCore.Models.AirPort", "DepartureAirPort3")
                        .WithMany()
                        .HasForeignKey("DepartureAirPortID3");

                    b.HasOne("BlitzerCore.Models.AirPort", "DestinationAirPort")
                        .WithMany()
                        .HasForeignKey("DestinationAirPortID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany("QuoteRequests")
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("DepartureAirPort");

                    b.Navigation("DepartureAirPort2");

                    b.Navigation("DepartureAirPort3");

                    b.Navigation("DestinationAirPort");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequestResort", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany()
                        .HasForeignKey("QuoteGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Hotel", "Resort")
                        .WithMany("RoomTypeQuotes")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.SKU", "ResortRoomType")
                        .WithMany()
                        .HasForeignKey("ResortRoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteGroup");

                    b.Navigation("Resort");

                    b.Navigation("ResortRoomType");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequestResortFilter", b =>
                {
                    b.HasOne("BlitzerCore.Models.Hotel", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany()
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("QuoteRequest");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequestTourOperatorFilter", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany()
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteRequest");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteSKUs", b =>
                {
                    b.HasOne("BlitzerCore.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.SKU", "SKU")
                        .WithMany()
                        .HasForeignKey("SKUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("SKU");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteToResultsMapper", b =>
                {
                    b.HasOne("BlitzerCore.Models.FlightItinerary", "FlightItinerary")
                        .WithMany()
                        .HasForeignKey("FlightItineraryId");

                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany("BotQuotes")
                        .HasForeignKey("QuoteGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.QuoteRequestResort", "QuoteRequestResort")
                        .WithMany()
                        .HasForeignKey("QuoteRequestResortID");

                    b.Navigation("FlightItinerary");

                    b.Navigation("QuoteGroup");

                    b.Navigation("QuoteRequestResort");
                });

            modelBuilder.Entity("BlitzerCore.Models.Ranking", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.UIRanking", "RankingPage")
                        .WithMany("Rankings")
                        .HasForeignKey("RankingPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.UI.UIResortPage", "ResortPage")
                        .WithMany()
                        .HasForeignKey("ResortPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RankingPage");

                    b.Navigation("ResortPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.RegisterBooking", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BlitzerCore.Models.RelationshipMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Primary")
                        .WithMany()
                        .HasForeignKey("PrimaryId");

                    b.HasOne("BlitzerCore.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Primary");

                    b.Navigation("Relationship");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("BlitzerCore.Models.SKU", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BlitzerCore.Models.Service", b =>
                {
                    b.HasOne("BlitzerCore.Models.Service", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("ParentService");
                });

            modelBuilder.Entity("BlitzerCore.Models.Sprint", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+Flight", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany()
                        .HasForeignKey("QuoteGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteGroup");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+Hotel", b =>
                {
                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany()
                        .HasForeignKey("QuoteGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuoteGroup");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+HotelRate", b =>
                {
                    b.HasOne("BlitzerCore.Models.Staging+Hotel", "HotelStaging")
                        .WithMany("HotelRateTypes")
                        .HasForeignKey("HotelStagingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelStaging");
                });

            modelBuilder.Entity("BlitzerCore.Models.Tag", b =>
                {
                    b.HasOne("BlitzerCore.Models.File", null)
                        .WithMany("Tags")
                        .HasForeignKey("FileID");
                });

            modelBuilder.Entity("BlitzerCore.Models.TagCategory", b =>
                {
                    b.HasOne("BlitzerCore.Models.Tag", null)
                        .WithMany("TagCategories")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("BlitzerCore.Models.TagCategoryMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.TagCategory", "TagCategory")
                        .WithMany()
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("BlitzerCore.Models.TaggedObject", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId");

                    b.HasOne("BlitzerCore.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Opportunity");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlitzerCore.Models.Task", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.Agent", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerID");

                    b.HasOne("BlitzerCore.Models.Agent", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany("Tasks")
                        .HasForeignKey("OpportunityID");

                    b.HasOne("BlitzerCore.Models.Agent", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("BlitzerCore.Models.Sprint", "Sprint")
                        .WithMany()
                        .HasForeignKey("SprintId");

                    b.HasOne("BlitzerCore.Models.Company", "TargetCompany")
                        .WithMany()
                        .HasForeignKey("TargetCompanyId");

                    b.HasOne("BlitzerCore.Models.Contact", "TargetContact")
                        .WithMany()
                        .HasForeignKey("TargetContactId");

                    b.HasOne("BlitzerCore.Models.Contact", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("BlitzerCore.Models.UserStory", "UserStory")
                        .WithMany("Work")
                        .HasForeignKey("UserStoryId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Issuer");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Opportunity");

                    b.Navigation("Owner");

                    b.Navigation("Sprint");

                    b.Navigation("TargetCompany");

                    b.Navigation("TargetContact");

                    b.Navigation("UpdatedBy");

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("BlitzerCore.Models.TaskTemplate", b =>
                {
                    b.HasOne("BlitzerCore.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BlitzerCore.Models.Team", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Primary")
                        .WithMany()
                        .HasForeignKey("PrimaryId");

                    b.Navigation("Primary");
                });

            modelBuilder.Entity("BlitzerCore.Models.TeamMember", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("BlitzerCore.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BlitzerCore.Models.Transportation", b =>
                {
                    b.HasOne("BlitzerCore.Models.AirPort", "ArrivalAirPort")
                        .WithMany()
                        .HasForeignKey("ArrivalAirPortID");

                    b.HasOne("BlitzerCore.Models.AirPort", "DepartAirPort")
                        .WithMany()
                        .HasForeignKey("DepartAirPortID");

                    b.HasOne("BlitzerCore.Models.QuoteGroup", "QuoteGroup")
                        .WithMany()
                        .HasForeignKey("QuoteGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteID");

                    b.HasOne("BlitzerCore.Models.QuoteRequest", null)
                        .WithMany("TransportationFilters")
                        .HasForeignKey("QuoteRequestID");

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalAirPort");

                    b.Navigation("DepartAirPort");

                    b.Navigation("Quote");

                    b.Navigation("QuoteGroup");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("BlitzerCore.Models.TripComponent", b =>
                {
                    b.HasOne("BlitzerCore.Models.Hotel", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Transportation", "Transportation")
                        .WithMany()
                        .HasForeignKey("TransportationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Trip", null)
                        .WithMany("TripComponents")
                        .HasForeignKey("TripID");

                    b.Navigation("Accommodation");

                    b.Navigation("Transportation");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Block", b =>
                {
                    b.HasOne("BlitzerCore.Models.BlockToPageMap", "PageMap")
                        .WithMany()
                        .HasForeignKey("BlockToPageMapID");

                    b.HasOne("BlitzerCore.Models.UI.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaID");

                    b.Navigation("Media");

                    b.Navigation("PageMap");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Content", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoID");

                    b.HasOne("BlitzerCore.Models.UI.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoID");

                    b.Navigation("Photo");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Media", b =>
                {
                    b.HasOne("BlitzerCore.Models.Activity", null)
                        .WithMany("Medias")
                        .HasForeignKey("ActivityId");

                    b.HasOne("BlitzerCore.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("BlitzerCore.Models.UI.Video", "MPeg")
                        .WithMany()
                        .HasForeignKey("MPegID");

                    b.HasOne("BlitzerCore.Models.UI.Page", "Resort")
                        .WithMany()
                        .HasForeignKey("PageID");

                    b.HasOne("BlitzerCore.Models.Post", null)
                        .WithMany("Picture")
                        .HasForeignKey("PostID");

                    b.HasOne("BlitzerCore.Models.UI.Photo", "Size1024x640")
                        .WithMany()
                        .HasForeignKey("Size1024x640ID");

                    b.HasOne("BlitzerCore.Models.UI.Photo", "Size1600x1200")
                        .WithMany()
                        .HasForeignKey("Size1600x1200ID");

                    b.HasOne("BlitzerCore.Models.UI.Photo", "Size1920x1080")
                        .WithMany()
                        .HasForeignKey("Size1920x1080ID");

                    b.HasOne("BlitzerCore.Models.UI.Photo", "Size560x460")
                        .WithMany()
                        .HasForeignKey("Size560x460ID");

                    b.HasOne("BlitzerCore.Models.UI.Photo", "ThumbNail")
                        .WithMany()
                        .HasForeignKey("ThumbNailID");

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("MPeg");

                    b.Navigation("Resort");

                    b.Navigation("Size1024x640");

                    b.Navigation("Size1600x1200");

                    b.Navigation("Size1920x1080");

                    b.Navigation("Size560x460");

                    b.Navigation("ThumbNail");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Page", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID");

                    b.HasOne("BlitzerCore.Models.UI.Content", "CenterContent")
                        .WithMany()
                        .HasForeignKey("ContentID");

                    b.HasOne("BlitzerCore.Models.UI.Block", "HeaderImage")
                        .WithMany()
                        .HasForeignKey("HeaderImageID");

                    b.HasOne("BlitzerCore.Models.UI.Block", "MainImage")
                        .WithMany()
                        .HasForeignKey("MainImageID");

                    b.HasOne("BlitzerCore.Models.UI.PageType", "PageType")
                        .WithMany()
                        .HasForeignKey("PageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CenterContent");

                    b.Navigation("HeaderImage");

                    b.Navigation("MainImage");

                    b.Navigation("PageType");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserMap", b =>
                {
                    b.HasOne("BlitzerCore.Models.Opportunity", "Opportunity")
                        .WithMany("Travelers")
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlitzerCore.Models.Contact", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Opportunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserStory", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BlitzerCore.Models.Feature", "Feature")
                        .WithMany("UserStories")
                        .HasForeignKey("FeatureId");

                    b.HasOne("BlitzerCore.Models.Contact", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerID");

                    b.HasOne("BlitzerCore.Models.Agent", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("BlitzerCore.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("BlitzerCore.Models.Sprint", "Sprint")
                        .WithMany("UserStories")
                        .HasForeignKey("SprintID");

                    b.Navigation("CreatedBy");

                    b.Navigation("Feature");

                    b.Navigation("Issuer");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Owner");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("BlitzerCore.Models.WebSrvLogin", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("BlitzerCore.Models.TourOperator", "TourOperator")
                        .WithMany()
                        .HasForeignKey("TourOperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp.DataServices.BlitzerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp.DataServices.BlitzerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.DataServices.BlitzerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp.DataServices.BlitzerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.DataServices.BlitzerUser", b =>
                {
                    b.HasOne("BlitzerCore.Models.Contact", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlitzerCore.Models.Franchise", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "FranchiseOwner")
                        .WithMany()
                        .HasForeignKey("FranchiseOwnerId");

                    b.HasOne("BlitzerCore.Models.Agent", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("FranchiseOwner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BlitzerCore.Models.Hotel", b =>
                {
                    b.HasOne("BlitzerCore.Models.AirPort", "AirPort")
                        .WithMany()
                        .HasForeignKey("AirPortID");

                    b.HasOne("BlitzerCore.Models.Agent", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("BlitzerCore.Models.QuoteRequest", "QuoteRequest")
                        .WithMany("HotelFilters")
                        .HasForeignKey("QuoteRequestID");

                    b.Navigation("AirPort");

                    b.Navigation("Owner");

                    b.Navigation("QuoteRequest");
                });

            modelBuilder.Entity("BlitzerCore.Models.Merchant", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("BlitzerCore.Models.AccountStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.Navigation("Owner");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BlitzerCore.Models.TourOperator", b =>
                {
                    b.HasOne("BlitzerCore.Models.Agent", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BlitzerCore.Models.Agent", b =>
                {
                    b.HasOne("BlitzerCore.Models.AgentProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("AgentProfileId");

                    b.HasOne("BlitzerCore.Models.Team", "PrimaryTeam")
                        .WithMany("Agents")
                        .HasForeignKey("PrimaryTeamId");

                    b.Navigation("PrimaryTeam");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BlitzerCore.Models.Client", b =>
                {
                    b.HasOne("BlitzerCore.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipID");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("BlitzerCore.Models.Flight", b =>
                {
                    b.HasOne("BlitzerCore.Models.FlightItinerary", "FlightItinerary")
                        .WithMany()
                        .HasForeignKey("FlightItinId");

                    b.HasOne("BlitzerCore.Models.Leg", "Leg")
                        .WithMany("Flights")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightItinerary");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Comparable", b =>
                {
                    b.HasOne("BlitzerCore.Models.UI.Panel", null)
                        .WithMany("Comparables")
                        .HasForeignKey("PanelId");

                    b.HasOne("BlitzerCore.Models.UI.UIResortPage", "CompPage")
                        .WithMany("Comparables")
                        .HasForeignKey("ResortID");

                    b.Navigation("CompPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Tile", b =>
                {
                    b.HasOne("BlitzerCore.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("BlitzerCore.Models.UI.Panel", null)
                        .WithMany("Tiles")
                        .HasForeignKey("PanelId");

                    b.HasOne("BlitzerCore.Models.UI.Page", "ResortPage")
                        .WithMany()
                        .HasForeignKey("ResortID");

                    b.Navigation("Category");

                    b.Navigation("ResortPage");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Gallary", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.SubPage", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UICountry", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UIRanking", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UIResortPage", b =>
                {
                    b.HasOne("BlitzerCore.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("BlitzerCore.Models.UI.Panel", "LeftPanel")
                        .WithMany()
                        .HasForeignKey("LeftPanelID");

                    b.HasOne("BlitzerCore.Models.UI.Panel", "RightPanel")
                        .WithMany()
                        .HasForeignKey("RightPanelID");

                    b.HasOne("BlitzerCore.Models.UI.UICountry", null)
                        .WithMany("Resorts")
                        .HasForeignKey("UICountryId");

                    b.Navigation("Country");

                    b.Navigation("LeftPanel");

                    b.Navigation("RightPanel");
                });

            modelBuilder.Entity("BlitzerCore.Models.Resort", b =>
                {
                    b.HasOne("BlitzerCore.Models.Category", null)
                        .WithMany("Resorts")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("BlitzerCore.Models.Activity", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("BlitzerCore.Models.Ad", b =>
                {
                    b.Navigation("Blobs");

                    b.Navigation("SupplementalMaterial");
                });

            modelBuilder.Entity("BlitzerCore.Models.AgentAirPortPreference", b =>
                {
                    b.Navigation("PreferredHotels");
                });

            modelBuilder.Entity("BlitzerCore.Models.BlitzSystem", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("BlitzerCore.Models.Booking", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BlitzerCore.Models.Category", b =>
                {
                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("BlitzerCore.Models.Company", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Emails");

                    b.Navigation("NoteEntries");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("BlitzerCore.Models.Contact", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Credits");

                    b.Navigation("Emails");

                    b.Navigation("MemberShips");

                    b.Navigation("NoteEntries");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("PreferredAirPorts");
                });

            modelBuilder.Entity("BlitzerCore.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BlitzerCore.Models.Feature", b =>
                {
                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("BlitzerCore.Models.File", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BlitzerCore.Models.Filter", b =>
                {
                    b.Navigation("Accommodations");

                    b.Navigation("AirFilters");

                    b.Navigation("InboundFilters");

                    b.Navigation("OutboundFilters");
                });

            modelBuilder.Entity("BlitzerCore.Models.FilteredAccommodation", b =>
                {
                    b.Navigation("IncludedSKUs");
                });

            modelBuilder.Entity("BlitzerCore.Models.HouseHold", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("BlitzerCore.Models.Leg", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("BlitzerCore.Models.Opportunity", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("NoteEntries");

                    b.Navigation("QuoteRequests");

                    b.Navigation("Tasks");

                    b.Navigation("Travelers");
                });

            modelBuilder.Entity("BlitzerCore.Models.Post", b =>
                {
                    b.Navigation("Picture");
                });

            modelBuilder.Entity("BlitzerCore.Models.Presentation", b =>
                {
                    b.Navigation("Queue");
                });

            modelBuilder.Entity("BlitzerCore.Models.Quote", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteGroup", b =>
                {
                    b.Navigation("BotQuotes");

                    b.Navigation("ClientViews");

                    b.Navigation("Flights");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("BlitzerCore.Models.QuoteRequest", b =>
                {
                    b.Navigation("HotelFilters");

                    b.Navigation("QuoteGroups");

                    b.Navigation("Tickets");

                    b.Navigation("TransportationFilters");
                });

            modelBuilder.Entity("BlitzerCore.Models.Region", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("BlitzerCore.Models.Sprint", b =>
                {
                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("BlitzerCore.Models.Staging+Hotel", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("HotelRateTypes");
                });

            modelBuilder.Entity("BlitzerCore.Models.Tag", b =>
                {
                    b.Navigation("TagCategories");
                });

            modelBuilder.Entity("BlitzerCore.Models.Team", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Content", b =>
                {
                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Page", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.Panel", b =>
                {
                    b.Navigation("Comparables");

                    b.Navigation("Tiles");
                });

            modelBuilder.Entity("BlitzerCore.Models.UserStory", b =>
                {
                    b.Navigation("Work");
                });

            modelBuilder.Entity("BlitzerCore.Models.Hotel", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Paragraphs");

                    b.Navigation("RoomTypeQuotes");
                });

            modelBuilder.Entity("BlitzerCore.Models.TourOperator", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BlitzerCore.Models.Agent", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("BlitzerCore.Models.Trip", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TripComponents");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UICountry", b =>
                {
                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UIRanking", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("BlitzerCore.Models.UI.UIResortPage", b =>
                {
                    b.Navigation("Comparables");
                });

            modelBuilder.Entity("BlitzerCore.Models.CruiseLine", b =>
                {
                    b.Navigation("Amenities");
                });
#pragma warning restore 612, 618
        }
    }
}
