using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using BlitzerCore.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authentication.Cookies;
using BlitzerCore.Models;
using BlitzerCore.Business.AIFilters;
using BlitzerCore.Business;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Identity.UI;
using Newtonsoft.Json.Serialization;

namespace Blitzer
{
    public class Startup
    {
        public IWebHostEnvironment _env;

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }
        public IWebHostEnvironment Env { get; set; }
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            Logger.Init("BlitzerWebServer");
            Logger.InitConsummer();
            Logger.ConnectionFactory = new DataServices.ConcreteFactory();
            services.AddTransient<IDbContext, Blitzer.DataServices.RepositoryContext>();
            string lDB = Configuration["ConnectionString:Blitzer"];
            //#if DEBUG
            services.AddTransient<Blitzer.Services.IWebTravelSrv, BlitzerCore.WebBots.WADStaticFileBot>();
            //#else
            //            services.AddTransient<Blitzer.Services.IWebTravelSrv, BlitzerCore.WebBots.WorldAgentDirectBot>();
            //#endif           
            //services.AddTransient<Blitzer.Services.IWebTravelSrv, BlitzerCore.WebBots.AAVacationBot>();
            //string lDB = Configuration["ConnectionString:TEST"];
            Logger.ConnectionString = lDB;
            services.AddDbContext<Blitzer.DataServices.RepositoryContext>(options =>
                options.UseSqlServer(lDB));

            services.AddDistributedMemoryCache();

            services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(30);
                options.Cookie.HttpOnly = true;
                options.Cookie.IsEssential = true;
            });

            services.Configure<IISServerOptions>(options =>
            {
                options.MaxRequestBodySize = int.MaxValue;
            });

            services.Configure<FormOptions>(x =>
            {
                x.ValueLengthLimit = int.MaxValue;
                x.MultipartBodyLengthLimit = int.MaxValue; // if don't set default value is: 128 MB
                x.MultipartHeadersLengthLimit = int.MaxValue;
            });

            services.AddDefaultIdentity<AppUser>(options => options.SignIn.RequireConfirmedAccount = true)
            .AddEntityFrameworkStores<Blitzer.DataServices.RepositoryContext>()
            .AddDefaultTokenProviders();

            services.AddControllers();
            services.AddControllersWithViews();
            services.AddControllers()
            .AddNewtonsoftJson(options =>
            {
                options.SerializerSettings.ContractResolver = new DefaultContractResolver();
            });

#if DEBUG
            services.AddRazorPages().AddRazorRuntimeCompilation();
#endif


            services.Configure<IdentityOptions>(options =>
            {
                options.SignIn.RequireConfirmedEmail = true;
            });

            services.AddAuthentication().AddCookie(options =>
            {
                options.LoginPath = "/Identity/Account/Login/";
                options.AccessDeniedPath = "/Identity/Account/Login/";
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, Microsoft.Extensions.Hosting.IHostEnvironment env, IDbContext aDbConext)
        {
            if (env.IsDevelopment())
            {
                app.UseBrowserLink();
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }
            //app.UseTrackingMiddleware();
            app.UseStatusCodePagesWithReExecute("/Home");
            app.UseHttpsRedirection();
            app.UseDefaultFiles();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();
            app.UseSession();

 

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
                endpoints.MapRazorPages();
            });

            // Register AI Filters
            AIFilterRegistry.UpdateDataBaseWithAIFilters(aDbConext, AIFilterRegistry.RegisterFilters());
            TourOperatorRegistry.UpdateDataBaseWithTourOperators(aDbConext, TourOperatorRegistry.RegisterWebBots(null));
        }
    }
}
