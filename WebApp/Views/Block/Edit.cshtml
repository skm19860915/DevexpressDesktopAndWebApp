@model BlitzerCore.Models.UI.Block
@using DevExtreme.AspNet.Mvc

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

<style>
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal2 {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content/Box */
    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        width: 80%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s
    }

    .modal-content2 {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        width: 70%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s
    }

    /* The Close Button */
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    /* Add Animation */
    @@-webkit-keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }

        to {
            top: 0;
            opacity: 1
        }
    }

    @@keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }

        to {
            top: 0;
            opacity: 1
        }
    }

    .modal-header {
        padding: 2px 16px;
        background-color: #5cb85c;
        color: white;
    }

    .modal-body {
        padding: 2px 16px;
    }

    .modal-footer {
        padding: 2px 16px;
        background-color: #5cb85c;
        color: white;
    }
</style>


<div class="row">
    <div class="col-md-10 offset-1">
        <h1>Edit</h1>

        <h4>Block</h4>
        <hr />
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label class="control-label">Title (Internal)</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Description (Internal)</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Block Title (Public)</label>
                <input asp-for="BlockTitle" class="form-control" />
                <span asp-validation-for="BlockTitle" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Body" class="control-label"></label>
                <textarea asp-for="Body" class="form-control" rows="5"></textarea>
                <span asp-validation-for="Body" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Caption" class="control-label"></label>
                <input asp-for="Caption" class="form-control" />
                <span asp-validation-for="Caption" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>1600x1200 Image</label>
                <input asp-for="Media.Size1600x1200.Location" class="form-control" />
                <span asp-validation-for="Media.Size1600x1200.Location" class="text-danger"></span>
            </div>
            <hr />
            <div class="form-group">
                <div class="row" style="padding-bottom:20px">
                    <H3 class="col-3">Photograph</H3>
                    <input class="col-1" asp-for="MediaID" id="txtMediaId" />
                    <div class="col-6"></div>
                    <button type="button" id="OpenBlkSearch" class="col-2 pull-right">Select Photo</button>
                </div>
                @if (Model.Media != null && Model.Media.ThumbNail != null && Model.Media.ThumbNail.Location != "")
                {
                    <img src="@Model.Media.ThumbNail.Location" style="height:200px;width:260px" />
                }
                else
                {
                    await Html.RenderPartialAsync("_Media", Model.Media);
                }

                <div id="BlkSearch" class="modal">
                    @(Html.DevExtreme().DataGrid<Media>()
                    .ID("grid-container")
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .RemoteOperations(false)
                    .FilterRow(filterRow => filterRow
                        .Visible(true)
                        .ApplyFilter(GridApplyFilterMode.Auto)
                    )
                    .SearchPanel(searchPanel => searchPanel
                        .Visible(true)
                        .Width(240)
                        .Placeholder("Search...")
                    )
                    .DataSource(d => d.WebApi()
                        .Controller("Media")
                        .LoadAction("Get")
                        .Key("Id")
                    )
                    .ShowColumnLines(false)
                    .ShowRowLines(true)
                    .HoverStateEnabled(true)
                    .RowAlternationEnabled(true)
                    .ShowBorders(true)
                    .Columns(columns => {
                        columns.AddFor(m => m.ThumbNail.Location)
                        .AllowFiltering(false)
                        .AllowSorting(false)
                        .CellTemplate(@<text>
                            <div>
                                <img height="100" width="100" src="<%- value %>" alt=""/>
                            </div>
                        </text>);
                        columns.AddFor(m => m.Id)
                            .Visible(false);
                        columns.AddFor(m => m.Title);
                        columns.AddFor(m => m.PageID)
                            .Caption("Resort")
                            .Lookup(lookup => lookup
                            .DataSource(d => d.Mvc().Controller("ResortPages").LoadAction("Get").Key("Id"))
                            .DisplayExpr("Title")
                            .ValueExpr("Id")
                        );
                        columns.AddFor(m => m.CategoryID)
                            .Caption("Category")
                            .Lookup(lookup => lookup
                            .DataSource(d => d.Mvc().Controller("Category").LoadAction("Get").Key("Id"))
                            .DisplayExpr("Name")
                            .ValueExpr("Id")
                        );
                    })
                    .Paging(p => p.PageSize(5))
                    .OnSelectionChanged("SelectionChanged")
                )

                </div>
            </div>
            <hr />
            <div class="form-group">
                <div class="row" style="padding-bottom:20px">
                    <H3 class="col-3">Hyperlink to this Page</H3>
                    <input class="col-1" asp-for="PageMap.PageId" id="txtPageId" />
                    <div class="col-6"></div>
                    <button type="button" id="OpenPageSearch" class="col-2 pull-right">Select Page</button>
                </div>
                @if (Model.PageMap == null || Model.PageMap.Page == null)
                {
                    <div>No Page Selected</div>
                }
                else
                {
                    await Html.RenderPartialAsync("_Media", Model.PageMap.Block.Media);
                }
                <div id="PageSearch" class="modal2">
                    <div class="modal-content2">
                        @(Html.DevExtreme().DataGrid<Page>()
                            .ID("grid-container2")
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .RemoteOperations(false)
                            .FilterRow(filterRow => filterRow
                                .Visible(true)
                                .ApplyFilter(GridApplyFilterMode.Auto)
                            )
                            .SearchPanel(searchPanel => searchPanel
                                .Visible(true)
                                .Width(240)
                                .Placeholder("Search...")
                            )
                            .DataSource(d => d.WebApi()
                                .Controller("Pages")
                                .LoadAction("Get")
                                .Key("Id")
                            )
                            .ShowColumnLines(false)
                            .ShowRowLines(true)
                            .HoverStateEnabled(true)
                            .RowAlternationEnabled(true)
                            .ShowBorders(true)
                            .Columns(columns => {
                                columns.AddFor(m => m.Id)
                                    .Visible(false);
                                columns.AddFor(m => m.Title);
                                columns.AddFor(m => m.PageTypeId)
                                    .Caption("Page Type")
                                    .Lookup(lookup => lookup
                                    .DataSource(d => d.Mvc().Controller("PageTypes").LoadAction("Get").Key("Id"))
                                    .DisplayExpr("Name")
                                    .ValueExpr("Id")
                                );
                            })
                            .Paging(p => p.PageSize(10))
                            .OnSelectionChanged("PageSelectionChanged")
                        )
                    </div>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<script>
    // Get the modal
    var modal = document.getElementById("BlkSearch");
    var Pagemodal = document.getElementById("PageSearch");

    // Get the button that opens the modal
    var btn = document.getElementById("OpenBlkSearch");
    // Get the button that opens the modal
    var Pagebtn = document.getElementById("OpenPageSearch");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    var lBlockImg = document.getElementById("BlockImg");

    // When the user clicks on the button, open the modal
    btn.onclick = function () {
        modal.style.display = "block";
    }

    // When the user clicks on the button, open the modal
    Pagebtn.onclick = function () {
        //alert("Clicked");
        Pagemodal.style.display = "block";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
        if (event.target == Pagemodal) {
            Pagemodal.style.display = "none";
        }
    }

    function SelectionChanged(selectedItems) {
        var data = selectedItems.selectedRowsData[0];

        if (data) {
            modal.style.display = "none";
            var lVal = data.Id;
            $("#txtMediaId").val(lVal);
            var lLocation = data.ThumbNail.Location;
            lBlockImg.src = lLocation;
        }
    }

    function PageSelectionChanged(selectedItems) {
        var data = selectedItems.selectedRowsData[0];

        if (data) {
            Pagemodal.style.display = "none";
            var lVal = data.Id;
            $("#txtPageId").val(lVal);
            var lLocation = data.ThumbNail.Location;
            lBlockImg.src = lLocation;
        }
    }
</script>

