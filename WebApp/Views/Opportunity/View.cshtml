@model BlitzerCore.Models.UI.UIOpportunity

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_AppLayout.cshtml";
}


@*@section Scripts{
    
}*@

<style>
    #request-panel {
        min-width: 505px;
        height: 400px;
        overflow-x: hidden;
        overflow-y: auto;
        padding: 18px;
        margin-top: 40px;
        background-color: rgba(191, 191, 191, 0.15);
    }

        #request-panel .parameter-info {
            display: flex;
        }

    .request-info .parameter-name {
        flex: 0 0 100px;
    }

    .request-info .parameter-name,
    .request-info .parameter-value {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>

<hr class="title-hr mt-0" />
<div class="row mx-0 d-flex justify-content-center mt-5" style="margin-top:5px !important;">
    @{
        var lQualification = "ProcPointer";
        var lPriceQuote = "ProcPointer";
        var lOnHold = "ProcPointer";
        var lNegotiations = "ProcPointer";
        var lWon = "ProcPointer";
        var lLoss = "ProcPointer";
        var lHistTab = "active";
        var lMemTab = "";
        var lHistStyle = "display:block";
        var lMemStyle = "";
        if (Model.NoteEntries.Count() < 1)
        {
            lMemTab = " active";
            lHistTab = " ";
            lHistStyle = "";
            lMemStyle = "display:block";
        }
        if (Model.Stage == OpportunityStages.New)
        {
            lQualification = "ActivePointer";
        }
        if (Model.Stage == OpportunityStages.QuoteSent)
        {
            lPriceQuote = "ActivePointer";
        }
        else if (Model.Stage == OpportunityStages.OnHold)
        {
            lOnHold = "ActivePointer";
        }
        else if (Model.Stage == OpportunityStages.Negotiations)
        {
            lNegotiations = "ActivePointer";
        }
        else if (Model.Stage == OpportunityStages.Won)
        {
            lWon = "ActivePointer";
        }
        else if (Model.Stage == OpportunityStages.Loss)
        {
            lLoss = "ActivePointer";
        }
        if (Model.Stage != OpportunityStages.Invalid)
        {
            <div class="@lQualification">
                <a href="/Opportunity/NewStage?id=@Model.Id&aStageId=1">
                    <div class="ProcLabel" style="font-size:16px">
                        New
                    </div>
                </a>
            </div>
            <div class="@lPriceQuote">
                <a href="/Opportunity/NewStage?id=@Model.Id&aStageId=2">
                    <div class="ProcLabel" style="font-size:16px">
                        Quote Sent
                    </div>
                </a>
            </div>
            <div class="@lOnHold">
                <a href="/Opportunity/NewStage?id=@Model.Id&aStageId=3">
                    <div class="ProcLabel" style="font-size:16px">
                        On Hold
                    </div>
                </a>
            </div>
            <div class="@lNegotiations">
                <a href="/Opportunity/NewStage?id=@Model.Id&aStageId=4">
                    <div class="ProcLabel" style="font-size:16px">
                        Negotiations
                    </div>
                </a>
            </div>
            <div class="@lLoss">
                <a href="/Opportunity/NewStage?id=@Model.Id&aStageId=6">
                    <div class="ProcLabel" style="font-size:16px">
                        Loss
                    </div>
                </a>
            </div>
        }
        else
        {
            <div class="ActivePointer">
                <div class="ProcLabel">
                    Cancelled
                </div>
            </div>
        }
        <div class="row">
            <div style="margin-left:10px; margin-right:10px; margin-top:10px;">Owner</div>
            @*<div data-submit-url="@Url.Action("ChangeOwner","Opportunity",  new {aOppId = @Model.Id, aNewOwner = Model.Owner})">
                <select style="height:45px !important;" class="form-control" asp-for="AgentId" asp-items="@ViewBag.Agents" onchange="getSelectedAgent()">
                </select>
            </div>*@
            <div>
                <select style="height:45px !important;" class="form-control" asp-for="AgentId" asp-items="@ViewBag.Agents" onchange="getSelectedAgent()">
                </select>
            </div>
        </div>
    }
</div>

<div class="content-container pt-3">

    <div class="Travelers TableBox table-margin-bottom w-100 bans-3d">
        <div>
            <h2 class="TableTitle">Travelers</h2>
            <hr class="TableLine" />
            @Html.HiddenFor(m => m.AgentId)
            @Html.HiddenFor(m => m.returnUrl)

            <div class="row TableHeader mx-0 table-ban-text table-ban-row">
                <div class="col-2">Relationship</div>
                <div class="col-2">First</div>
                <div class="col-1">Middle</div>
                <div class="col-2">Last</div>
                <div class="col-1">DOB</div>
                <div class="col-2">Email</div>
                <div class="col-2">Cell</div>
            </div>
        </div>
        <div class="TableData">
            @for (int i = 0; i < Model.Travelers.Count; i++)
            {
                <div class="row mx-0 table-text">
                    <div class="col-2">@Model.Travelers[i].Relationship</div>
                    <div class="col-2"><a href="/Contacts/Details/@Model.Travelers[i].Id">@Model.Travelers[i].First</a></div>
                    <div class="col-1">@Model.Travelers[i].Middle</div>
                    <div class="col-2"><a href="/Contacts/Details/@Model.Travelers[i].Id">@Model.Travelers[i].Last</a></div>
                    <div class="col-1">@Model.Travelers[i].DOB</div>
                    <div class="col-2"><a href="mailto:@Model.Travelers[i].PrimaryEmail"> @Model.Travelers[i].PrimaryEmail</a></div>
                    <div class="col-2">@Model.Travelers[i].Cell</div>
                </div>
            }
        </div>
    </div>
    <div class="opp-table-2 w-100 bans-3d">
        <div class="b_tab">
            <button class="b_tablinks header-ban-text ban-btn @lHistTab" type="button" onclick="b_openPanel(event, 'b_History')" id="defaultOpen">History</button>
            <button class="b_tablinks header-ban-text ban-btn" type="button" onclick="b_openPanel(event, 'b_AddNote')">Note</button>
            <button class="b_tablinks header-ban-text ban-btn @lMemTab" type="button" onclick="b_openPanel(event, 'b_Notes')">Memo</button>
            <button class="b_tablinks header-ban-text ban-btn" type="button" onclick="b_openPanel(event, 'b_Tasks')">Tasks</button>
            <button class="b_tablinks header-ban-text ban-btn" type="button" onclick="b_openPanel(event, 'b_files')">Files</button>
        </div>
        <div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="bg-white">
                <div id="b_History" class="b_tabPanel" style="@lHistStyle">
                    <div class="oy-auto">
                        @if (Model.NoteEntries != null)
                        {
                            foreach (var lNote in Model.NoteEntries)
                            {
                                <div class="NoteBubble">
                                    <div class="row">
                                        <div class="NoteWriter">@lNote.Writer</div>
                                        <div class="NoteWhen">@lNote.When</div>
                                        @if (lNote.Who != null && lNote.Who.Trim().Length > 0)
                                        {
                                            <div class="NoteWho">Spoke with @lNote.Who</div>
                                            @if (lNote.Where != null && lNote.Where.Trim().Length > 0)
                                            {
                                                <div class="NoteWhere"> @@ @lNote.Where</div>
                                            }
                                        }
                                    </div>
                                    <div class="NoteMemoBubble">
                                        <div>@lNote.Memo</div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                <div id="b_AddNote" class="b_tabPanel">
                    <form asp-action="AddNote">
                        @Html.HiddenFor(m => m.Id)
                        <div class="row">
                            <div class="col-6">
                                <label class="control-label">Who we talked with</label>
                                <input asp-for="Note_Who" class="form-control" />
                                <span asp-validation-for="Note_Who" class="text-danger"></span>
                            </div>
                            <div class="col-6">
                                <label class="control-label">Where are they</label>
                                <input asp-for="Note_Where" class="form-control" />
                                <span asp-validation-for="Note_Where" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="w-100 pt-4">
                            <textarea asp-for="Note_Text" class="w-100" rows="14"></textarea>
                        </div>
                        <div class="btn-clearence">
                            <input type="submit" class="btn-command" value="Save" />
                        </div>
                    </form>
                </div>
                <div id="b_Notes" class="b_tabPanel" style="@lMemStyle">
                    <form asp-action="Edit">
                        @Html.HiddenFor(m => m.AgentId)
                        @Html.HiddenFor(m => m.Id)
                        <textarea asp-for="Notes" class="opp-txt-area" rows="5"></textarea>
                        <div class="btn-clearence">
                            <input type="submit" class="btn-command" value="Save" />
                        </div>
                    </form>
                </div>
                <div id="b_Tasks" class="b_tabPanel">
                    <a href="/Task/Create/@Model.Id">New Task</a>
                    @(Html.DevExtreme().DataGrid<UITask>()
                                .DataSource(Model.Tasks)
                                .RemoteOperations(false)
                                .Selection(s => s.Mode(SelectionMode.Single))
                                .ShowRowLines(true)
                                .HoverStateEnabled(true)
                                .RowAlternationEnabled(true)
                                .ShowBorders(true)

                                .Columns(columns => {
                                    columns.AddFor(m => m.Name).AllowEditing(false);
                                    columns.AddFor(m => m.Priority).Alignment(HorizontalAlignment.Center);
                                    columns.AddFor(m => m.StatusStr);
                                })
                                .Paging(p => p.PageSize(10))
                                .OnSelectionChanged("SelectionChanged")
                            )
                </div>
                <div id="b_files" class="b_tabPanel">
                    @(Html.DevExtreme().Popup()
                                .ID("file-detail-popup")
                                .Width(500)
                                .Height(480)
                                .Container(".dx-viewport")
                                .ShowTitle(true)
                                .Title("File Detail")
                                .DragEnabled(false)
                                .CloseOnOutsideClick(true)
                                .ShowCloseButton(false)
                                .ToolbarItems(barItems => {
                                    barItems.Add()
                                        .Toolbar(Toolbar.Bottom)
                                        .Location(ToolbarItemLocation.Before)
                                        .Widget(widget => widget.Button()
                                            .Icon("email")
                                            .Text("Save Detail")
                                            .OnClick(@<text>
                                                function SaveFileDetail(data) {
                                                    $.ajax({
                                                        type: "POST",
                                                        url: "@Url.Action("SaveFileDetail")",
                                                        data: {
                                                            ID:$("#uFileID").val(), URI: filePath, Name: $("#uFileName").val(),
                                                            Description: $("#uFileDescription").val(),
                                                            OpportunityId:$("#Id").val(), FileTypeId: $("#uFileType").val(),
                                                            BookingTypeId: $("#uFileBookingType").val(),
                                                            AgentId : $("#AgentId").val(),

                                                        },
                                                        dataType: "text",
                                                        success: function (msg) {
                                                            const message = `File information has been saved successfully`;
                                                            DevExpress.ui.notify({
                                                                message: message,
                                                                position: {
                                                                    my: "center top",
                                                                    at: "center top"
                                                                }
                                                            }, "success", 3000);

                                                            $("#uFileID").val("");
                                                            $("#uFileName").val("");
                                                            $("#uFileType").val("");
                                                            $("#uFileDescription").val("");
                                                        },
                                                        error: function (req, status, error) {
                                                            console.log(error);
                                                        }
                                                    });
                                                }
                                            </text>)
                                        );
                                    barItems.Add()
                                        .Toolbar(Toolbar.Bottom)
                                        .Location(ToolbarItemLocation.After)
                                        .Widget(widget => widget.Button()
                                            .Text("Close")
                                            .OnClick(@<text>
                                                function hideInfo(data) {
                                                    const popup = $("#file-detail-popup").dxPopup("instance");
                                                    popup.hide();
                                                }
                                            </text>)
                                        );
                                })
                            )
                    <div class="row">
                        @(Html.DevExtreme().FileUploader()
                                    .ID("file-uploader")
                                    .ChunkSize(200000)
                                    .MaxFileSize(1048576)
                                    .UploadChunk("uploadChunk")
                                    .OnUploaded("onUploadSuccessfully")
                                )
                        <text>
                            @*<div id="request-panel"></div>*@
                            <script src="~/js/azure-file-system.js"></script>
                            <script>
                                        function GetTemplate() {
                                            return `<div class="form">
                                                        <input type="hidden" id="uFileID" value="">
                                                        <div class="form-group">
                                                            <label>Name:</label>
                                                            <input type="text" id="uFileName" class="form-control" />
                                                        </div>
                                                        <div class="form-group">
                                                            <label>File Type:</label>
                                                            <select id="uFileType" class="form-control">
                                                                <option value="">Please select</option>
                                                                <option value="1">Client Itinerary</option>
                                                                <option value="2">Payment</option>
                                                                <option value="3">Travel Docs</option>
                                                                <option value="4">Agent Itinerary</option>
                                                            </select>
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Description:</label>
                                                            <textarea type="text" id="uFileDescription" class="form-control" row="4"></textarea>
                                                        </div>
                                                    </div>`;
                                        }
                                        function OpenDocumentDetail(ID,Description,Name,FileTypeId) {
                                            const popup = $("#file-detail-popup").dxPopup("instance");
                                            popup.option({
                                                contentTemplate: GetTemplate()
                                            });
                                            popup.show();

                                            $("#uFileID").val($("#hFileID" + ID).val());
                                            $("#uFileName").val($("#hFileName" + ID).val());
                                            $("#uFileType").val($("#FileType" + ID).val());
                                            $("#uFileDescription").text($("#hFileDescription" + ID).val());
                                        }
                                        function OpenDocumentFile(e) {
                                            window.open(e.key.URI, '_blank');
                                        }
                                        var filePath = "";
                                        function onUploadSuccessfully(e) {
                                            const popup = $("#file-detail-popup").dxPopup("instance");
                                            popup.option({
                                                contentTemplate: GetTemplate()
                                            });
                                            popup.show();
                                            //$("#exampleModal").modal("show");
                                        }
                                        function uploadChunk(file, uploadInfo) {
                                            var deferred = null;

                                            if(uploadInfo.chunkIndex === 0) {
                                                deferred = gateway.getUploadAccessUrl(file.name).done(function(accessUrl) {
                                                    uploadInfo.customData.accessUrl = accessUrl;
                                                });
                                            } else {
                                                deferred = $.Deferred().resolve().promise();
                                            }

                                            deferred = deferred.then(function() {
                                                return gateway.putBlock(uploadInfo.customData.accessUrl, uploadInfo.chunkIndex, uploadInfo.chunkBlob);
                                            });

                                            if(uploadInfo.chunkIndex === uploadInfo.chunkCount - 1) {
                                                deferred = deferred.then(function() {
                                                    return gateway.putBlockList(uploadInfo.customData.accessUrl, uploadInfo.chunkCount);
                                                });
                                            }

                                            return deferred.promise();
                                        }

                                        function onRequestExecuted(e) {
                                            filePath = e.urlPath;
                                            //$("<div>").addClass("request-info").append(
                                            //        createParameterInfoDiv("Method:", e.method),
                                            //        createParameterInfoDiv("Url path:", e.urlPath),
                                            //        createParameterInfoDiv("Query string:", e.queryString),
                                            //        $("<br>")
                                            //    )
                                            //    .prependTo("#request-panel");
                                        }

                                        function createParameterInfoDiv(name, value) {
                                            //return $("<div>").addClass("parameter-info").append(
                                            //    $("<div>").addClass("parameter-name").text(name),
                                            //    $("<div>").addClass("parameter-value dx-theme-accent-as-text-color").text(value).attr("title", value)
                                            //);
                                        }

                                        var endpointUrl = '@Url.RouteUrl("FileUploaderAzureAccessApi")';
                                        var gateway = new AzureGateway(endpointUrl, onRequestExecuted);
                            </script>
                        </text>
                    </div>
                    <div class="row" style="padding-left:10px;padding-right:10px">
                        @(Html.DevExtreme().DataGrid()
                                    .ID("gridContainer")
                                    .ShowBorders(true)
                                    .Selection(s => s.Mode(SelectionMode.Single))
                                    .HoverStateEnabled(true)
                                    .DataSource(Model.Files)
                                    .OnRowClick("OpenDocumentFile")
                                    .KeyExpr("ID")
                                    .Columns(c => {
                                        c.Add().DataField("FileType");
                                        c.Add().DataField("Date");
                                        c.Add().DataField("Version");
                                        c.Add().DataField("Name");
                                        c.Add().DataField("Description");
                                        c.Add().Caption("Action")
                                               .CellTemplate(@<text>
                                                    <input type="hidden"  value="<%- data.ID %>" id="hFileID<%- data.ID %>"/>
                                                    <input type="hidden"  value="<%- data.Description %>" id="hFileDescription<%- data.ID %>"/>
                                                    <input type="hidden"  value="<%- data.Name %>" id="hFileName<%- data.ID %>"/>
                                                    <input type="hidden"  value="<%- data.FileType %>" id="hFileTypeId<%- data.ID %>"/>
                                                    <button class="link" onclick="OpenDocumentDetail(<%- data.ID %>)">Edit</button>
                                                </text>)
                                            .Width(100)
                                            .AllowFiltering(false)
                                            .AllowSorting(false);

                                    })
                                )
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="QuoteRequests" class="Travelers w-100">
        <div id="QuoteTable" class="TableBox bans-3d">
            <div class="row">
                <h2 class="col-10 TableTitle"> Quote Requests</h2>
                <div class="col-2 d-flex align-items-center"><a href="/QuoteRequest/New/@Model.Id" class="btn-command">New</a></div>
            </div>
            <hr class="TableLine" />
            <div class="row TableHeader mx-0 table-ban-text table-ban-row">
                <div class="col-1">Departure</div>
                <div class="col-1">Destination</div>
                <div class="col-1">Depart</div>
                <div class="col-1">Return</div>
                <div class="col-1">Created</div>
                <div class="col-1">Finished</div>
                <div class="col-2">Quoted</div>
                <div class="col-2">Viewed</div>
                <div class="col-2"></div>
            </div>
            <div class="TableData">
                @for (int i = 0; i < Model.QuoteRequests.Count; i++)
                {
                <div class="row mx-0 table-text">
                    <div class="col-1">@Model.QuoteRequests[i].DepartureCityCode</div>
                    <div class="col-1">@Model.QuoteRequests[i].DestinationCityCode</div>
                    <div class="col-1">@Model.QuoteRequests[i].StartDate</div>
                    <div class="col-1">@Model.QuoteRequests[i].EndDate</div>
                    <div class="col-1">@Model.QuoteRequests[i].When</div>
                    <div class="col-1">@Model.QuoteRequests[i].Finished</div>
                    <div class="col-2">@Model.QuoteRequests[i].SentQuote</div>
                    <div class="col-2">@Model.QuoteRequests[i].Viewed</div>
                    <div class="col-2"><a href="/QuoteRequest/Edit/@Model.QuoteRequests[i].Id">Edit</a></div>
                </div>
                }
            </div>
        </div>
    </div>
</div>


<script>
    //document.getElementById("defaultOpen").click();

    function b_openPanel(evt, cityName) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("b_tabPanel");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("b_tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(cityName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    function SelectionChanged(selectedItems) {
        var lObject = selectedItems.selectedRowsData[0];
        var lId = lObject.Id;
        document.location.href = "/Task/Edit/" + lId;
    }

    function getSelectedAgent() {
        var link = '@Html.Raw(Url.Action("ChangeOwner","Opportunity",  new {aOppId = @Model.Id, aNewOwner = "-1"}))';
        var selectedId = document.getElementById("Id").value;
        link = link.replace("-1", selectedId);
        document.location.href = link;
    }
</script>

